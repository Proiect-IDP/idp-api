version: '3.3'

services:
  business-logic-service:
    image: meduard/business-logic-service:latest
    networks:
      - business_grafana
      - business_auth
      - main
      - business_kong
    ports:
      - 5000:5000
    depends_on:
      - io-service
    environment:
      MONGO_INITDB_ROOT_USERNAME: weather_api_admin
      MONGO_INITDB_ROOT_PASSWORD: weather_api_pass
      MONGO_HOST: weather-db
      MONGO_PORT: 27017
      DB_NAME: weather_data
    deploy:
      restart_policy:
        condition: on-failure

  auth-service:
    image: meduard/auth-service:latest
    networks:
      - business_kong
    ports:
      - 4000:4000
    deploy:
      restart_policy:
        condition: on-failure

  prediction-service:
    image: meduard/prediction-service:latest
    networks:
      - main
    ports:
      - 7000:7000
    deploy:
      restart_policy:
        condition: on-failure

  io-service:
    image: meduard/io-service:latest
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - main
      - io_db
    ports:
      - 6001:5000
    depends_on:
      - weather-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: weather_api_admin
      MONGO_INITDB_ROOT_PASSWORD: weather_api_pass
      MONGO_HOST: weather-db
      MONGO_PORT: 27017
      DB_NAME: weather_data

  weather-db:
    image: mongo:latest
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - express_db
      - io_db
    ports:
      - 27017:27017
    volumes:
      - db_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: weather_api_admin
      MONGO_INITDB_ROOT_PASSWORD: weather_api_pass

  kong:
    image: kong:latest
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 80:8000
      - 443:8443
      - 8001:8001
      - 8444:8444
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    networks:
      - business_kong
      - express_db
      - prometheus_kong

  mongo-express:
    image: mongo-express:latest
    networks:
      - express_db
    ports:
      - 8111:8081
    depends_on:
      - weather-db
    deploy:
      restart_policy:
        condition: on-failure
      replicas: 1
      placement:
        constraints: [node.role == manager]
    environment:
      ME_CONFIG_MONGODB_SERVER: weather-db
      ME_CONFIG_MONGODB_ADMINUSERNAME: weather_api_admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: weather_api_pass
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
  
  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
  
  prometheus:
    image: prom/prometheus
    volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
        - 9090:9090
    networks:
      - prometheus_kong
      - grafana_prometheus
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  node_exporter:
        image: prom/node-exporter
        deploy:
            mode: global
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        ports:
            - 9100:9100
        networks:
            - prometheus_kong
  
  grafana:
    image: grafana/grafana:latest
    networks:
      - grafana_prometheus
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
    volumes:
      - grafana_dataa:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

volumes:
  db_data: {}
  portainer_data:
  grafana_dataa: {}

networks:
  main:
  io_db:
  express_db:
  business_grafana:
  business_auth:
  business_kong:
  agent_network:
    driver: overlay
    attachable: true
  prometheus_kong:
  grafana_prometheus: